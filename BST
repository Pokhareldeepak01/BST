//
//  main.cpp
//  lab3
//
//  Created by Deepak Pokharel on 3/1/20.
//  Copyright Â© 2020 Deepak. All rights reserved.
//



/*
Student Name: Deepak Pokharel
Student NetID: dp1602
Compiler Used: xcode
Description:Program that implements and manages several user defined BSTs.!! */



// Preprocessor directives
#include <iostream>
#include <cstdlib>
#include <fstream>
#include <iomanip>

using namespace std;


 // Declaration of a Node
 struct node
 {
     int info;
     struct node *left;
     struct node *right;
 }
 *root;
//Class BST declaration
class BST
{
    

    public:
        void find(int, node **, node **);
        void insert(node *, node *);
        void del(int);
        void case_1(node *,node *);
        void case_2(node *,node *);
        void case_3(node *,node *);
        void pre_order(node *);
        void in_order(node *);
        void post_order(node *);
        void disp(node *, int);
        void destroy_tree(node *leaf);
   
    
        BST()// Empty Bst constructot sets to null
        {
            root = NULL;
        }
    ~BST()
    {
      destroy_tree(root);
    }
   
};



/*
 * Find Element in the Tree
 */
void BST::find(int item, node **par, node **lc)
{
    node *ptr, *ptrsave;
    if (root == NULL)
    {
        *lc = NULL;
        *par = NULL;
        return;
    }
    if (item == root->info)
    {
        *lc = root;
        *par = NULL;
        return;
    }
    if (item < root->info)
        ptr = root->left;
    else
        ptr = root->right;
    ptrsave = root;
    while (ptr != NULL)
    {
        if (item == ptr->info)
        {
            *lc = ptr;
            *par = ptrsave;
            return;
        }
        ptrsave = ptr;
        if (item < ptr->info)
            ptr = ptr->left;
    else
        ptr = ptr->right;
    }
    *lc = NULL;
    *par = ptrsave;
}
 
/*
 * Inserting Element into the Tree
 */
void BST::insert(node *tree, node *newnode)
{
    if (root == NULL)
    {
        root = new node;
        root->info = newnode->info;
        root->left = NULL;
        root->right = NULL;
        cout<<"Root Node is Added"<<endl;
        return;
    }
    if (tree->info == newnode->info)
    {
        cout<<"Element already in the tree"<<endl;
        return;
    }
    if (tree->info > newnode->info)
    {
        if (tree->left != NULL)
        {
            insert(tree->left, newnode);
    }
    else
    {
            tree->left = newnode;
            (tree->left)->left = NULL;
            (tree->left)->right = NULL;
            cout<<"Node Added To Left"<<endl;
            return;
        }
    }
    else
    {
        if (tree->right != NULL)
        {
            insert(tree->right, newnode);
        }
        else
        {
            tree->right = newnode;
            (tree->right)->left = NULL;
            (tree->right)->right = NULL;
            cout<<"Node Added To Right"<<endl;
            return;
        }
    }
}
 
/*
 * Delete Element from the tree
 */
void BST::del(int item)
{
    node *parent, *location;
    if (root == NULL)
    {
        cout<<"Tree empty"<<endl;
        return;
    }
    find(item, &parent, &location);
    if (location == NULL)
    {
        cout<<"Item not present in tree"<<endl;
        return;
    }
    if (location->left == NULL && location->right == NULL)
        case_1(parent, location);
    if (location->left != NULL && location->right == NULL)
        case_2(parent, location);
    if (location->left == NULL && location->right != NULL)
        case_2(parent, location);
    if (location->left != NULL && location->right != NULL)
        case_3(parent, location);
    free(location);
 

}

//case 1
void BST::case_1(node *par, node *lc )
{
    if (par == NULL)
    {
        root = NULL;
    }
    else
    {
        if (lc == par->left)
            par->left = NULL;
        else
            par->right = NULL;
    }
}
 
//case 2
void BST::case_2(node *par, node *lc)
{
    node *child;
    if (lc->left != NULL)
        child = lc->left;
    else
        child = lc->right;
    if (par == NULL)
    {
        root = child;
    }
    else
    {
        if (lc == par->left)
            par->left = child;
        else
            par->right = child;
    }
}
 
//case 3
void BST::case_3(node *par, node *lc)
{
    node *ptr, *ptrsave, *suc, *parsuc;
    ptrsave = lc;
    ptr = lc->right;
    while (ptr->left != NULL)
    {
        ptrsave = ptr;
        ptr = ptr->left;
    }
    suc = ptr;
    parsuc = ptrsave;
    if (suc->left == NULL && suc->right == NULL)
        case_1(parsuc, suc);
    else
        case_2(parsuc, suc);
    if (par == NULL)
    {
        root = suc;
    }
    else
    {
        if (lc == par->left)
            par->left = suc;
        else
            par->right = suc;
    }
    suc->left = lc->left;
    suc->right = lc->right;
}
 
 
// condition for post order traversal
void BST::post_order(node *ptr)
{
    if (root == NULL)
    {
        cout<<"Tree is empty"<<endl;
        return;
    }
    if (ptr != NULL)
    {
        post_order(ptr->left);
        post_order(ptr->right);
        cout<<ptr->info<<"  ";
    }
}

// condition for in order traversal
void BST::in_order(node *ptr)
{
    if (root == NULL)
    {
        cout<<"Tree is empty"<<endl;
        return;
    }
    if (ptr != NULL)
    {
        in_order(ptr->left);
        cout<<ptr->info<<"  ";
        in_order(ptr->right);
    }
}

// condition for pre-order Traversal
void BST::pre_order(node *ptr)
{
    if (root == NULL)
    {
        cout<<"Tree is empty"<<endl;
        return;
    }
    if (ptr != NULL)
    {
        cout<<ptr->info<<"  ";
        pre_order(ptr->left);
        pre_order(ptr->right);
    }
}
 
// Function to print the tree
void BST::disp(node *ptr, int level)
{
    int i;
    if (ptr != NULL)
    {
        disp(ptr->right, level+1);
        cout<<endl;
        if (ptr == root)
            cout<<"Root->:  ";
        else
        {
            for (i = 0;i < level;i++)
                cout<<"           ";
    }
        cout<<ptr->info;
        disp(ptr->left, level+1);
    }
}
// Function to delete a tree (container)

void BST::destroy_tree(node *leaf)
{
  if(leaf!=NULL)
  {
    destroy_tree(leaf->left);
    destroy_tree(leaf->right);
    delete leaf;
  }
}

















// Mani.cpp
// main function Implementation
int main()
{
    int choice, num;
    BST bst;
    node *temp;
  while(1)
       {
        cout<<"-----------------"<<endl;
        cout<<" --<Choice Menu>--     "<<endl;
        cout<<"-----------------"<<endl;
        cout<<"1.Insert Element "<<endl;
        cout<<"2.Delete Element "<<endl;
        cout<<"3.Inorder Traversal"<<endl;
        cout<<"4.Preorder Traversal"<<endl;
        cout<<"5.Display"<<endl;
        cout<<"6.Postorder Traversal"<<endl;
        cout<<"7.Quit"<<endl;
        cout<<"Enter your choice : ";
       

           // Menu based options
        cin>>choice;
        switch(choice)
        {
            case 1:  // Inserting element
            temp = new node;
            cout<<"Enter number you want to  insert : ";
            cin>>temp->info;
            bst.insert(root, temp);
                break;
                
                
    case 2:  //
            if (root == NULL)
            {
                cout<<"Tree is EMPTY,no elements to delete"<<endl;
               
            }
            cout<<"Enter the number to be deleted : ";
            cin>>num;
            bst.del(num);
                continue;
    case 3:
            cout<<"Inorder Traversal of BST:"<<endl;
                bst.in_order(root);
            cout<<endl;
            break;
    case 4:
            cout<<"Preorder Traversal of BST:"<<endl;
                bst.pre_order(root);
            cout<<endl;
            break;
    case 5:
        cout<<"Display BST:"<<endl;
                           bst.disp(root,1);
                           cout<<endl;
                           break;
        case 6:
            cout<<"Postorder Traversal of BST:"<<endl;
                bst.post_order(root);
            cout<<endl;
            break;
       
        case 7:
            exit(1);
        default:
            cout<<"Enter Numbers 1 to 7"<<endl;
        }
    }
}
 
